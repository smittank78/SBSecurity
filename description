Beans :

PassWard Encoder -> encode the passward
SecurityFilterChain -> for end-points authorization
InMemoryUserDetailsManager -> to create user in memory
							-> userDetails user = User....
DataSource -> sql connection
JdbcTemplate -> perform db opertaion
JdbcUserDetailsManager -> create user into db using spring-boot security 
configureBuilder -> autowired -> to enable authentication
 
 
 Flow :
 
 when app started configuration-file executed 
 beans created
 sign-up -> /user/created -> UserDto as payLoad 
 						  	-> controller
	 						  -> CrudService -> user created -> JdbcUserDetailsManager.create(user) 
 resetPassward -> /user/resetpassward -> UserPwdResetDto as payLoad 
 							-> controller
	 							-> select user by userName
	 							-> old_pass = pwd from db
	 							-> if matches then update in db
	 							
 delete -> /user/delete	 -> -> USerDto as payLoad 
 							-> controller
	 							-> delete user by userName							
 
 
 api/ && api/home : is public api
 
 api/login : is authorized spring security will redirect you on login page once login done then
 			 jwt token get generated and send to user
  
 api/private && api/dashboard : when user send request to this apis user also need to send 
 								token to api then using aop concept
 								 @before advice will executed and token validated 
 								 if token is valid then service going to execute 
  								 else it will throw unauthorized user 
 
 Aop : is used with parameterized methods
 
 Service Info : available on methods
